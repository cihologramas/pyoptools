#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
pyOpTools
\begin_inset Newline newline
\end_inset

USER MANUAL
\end_layout

\begin_layout Chapter
General Description
\end_layout

\begin_layout Standard
The pyOpTools is a library written in PYTHON to allow easy simulation of
 optical systems.
 It is composed by the following a set of packages:
\end_layout

\begin_layout Description
gui Package containing a few programs that use pyOpTools to simulate optical
 systems
\end_layout

\begin_layout Description
misc Package containing auxiliary functions 
\end_layout

\begin_layout Description
ray_trace Package containing classes and routines used to simulate 3D non-secuent
ial, physical raytrace of optical systems.
\end_layout

\begin_layout Description
wavefront Package containing classes and routines used to simulate the propagatio
n of wavefronts through optical systems
\end_layout

\begin_layout Standard
In the following chapters, each package will be described and a few examples
 of its use will be given.
\end_layout

\begin_layout Chapter
Raytrace tutorial
\end_layout

\begin_layout Standard
In this chapter a small tutorial to do raytracing will be .....
\end_layout

\begin_layout Chapter
Wavefront propagation tutorial
\end_layout

\begin_layout Standard
To describe an optical field, 
\series bold
pyOpTools
\series default
 defines the Field class in the package wavefront.
 This class is designed to facilitate the calculation of wave propagation
 in free space, as well as in optical systems.
\end_layout

\begin_layout Section
Simple example
\end_layout

\begin_layout Standard
To make wafront propagation calculation the first step is to define an optical
 field.
 In the following example we are using some numpy methods, to create a plane
 wave: 
\end_layout

\begin_layout LyX-Code
#Create a cartesian grid with 1000 samples from -1 to 1 in X and Y
\end_layout

\begin_layout LyX-Code
X,Y=meshgrid(linspace(-1,1,1000),linspace(-1,1,1000))
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#Define the normalized direction of propagation.
\end_layout

\begin_layout LyX-Code
e=array((.3, 0, 1))
\end_layout

\begin_layout LyX-Code
e=e/(sqrt(dot(e, e)))
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#Define the K propagation vector
\end_layout

\begin_layout LyX-Code
lm=.632e-3 
\end_layout

\begin_layout LyX-Code
k=(2*pi/lm)*e 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#Define the field data
\end_layout

\begin_layout LyX-Code
a=zeros_like(X)
\end_layout

\begin_layout LyX-Code
a[20:-20,20:-20]=10.
\end_layout

\begin_layout LyX-Code
u=a*exp(1.j*(k[0]*X+k[1]*Y)) 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#Get the pixel size from the created grid
\end_layout

\begin_layout LyX-Code
pixsize=X[0, 1]-X[0, 0]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#Define the field
\end_layout

\begin_layout LyX-Code
F=Field(data=u, psize=pixsize, l=lm)
\end_layout

\begin_layout Standard
This script creates an instance of the Field class containing the samples
 of a complex plane wave having an amplitude of 
\begin_inset Formula $10$
\end_inset

 at the central aof the field, and 
\begin_inset Formula $\vec{k}=\frac{2\pi}{\lambda}(0.28734789,0.,0.95782629)$
\end_inset

, where 
\begin_inset Formula $\lambda=0.632\mathrm{e}-3$
\end_inset

.
 One thing to notice, is that no units have been given in the Field definition.
 The only limitation, is that you use the same units in all operations.
 In this case, we are giving the wavelength in microns, so all other values
 such as pixel size in this case are in microns also.
 The same will apply if a propagation for this field is calculated, all
 the units will be in microns.
\end_layout

\begin_layout Standard
The most simple things we can do for a field, is to plot its amplitude,
 its angle, and its phase.
 These values are defined as:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{eqnarray*}
\mathrm{amplitude(F)} & = & \mathrm{abs(F)}\\
\mathrm{angle}(\mathrm{F}) & = & \mathrm{atan2}\left(\frac{\mathrm{real(F)}}{\mathrm{imag(F)}}\right)\\
\mathrm{phase(F)} & = & \mathrm{unwrap(angle(F))}\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
for the previous example, this plots can be obtained using the following
 script:
\end_layout

\begin_layout LyX-Code
#Plotting the amplitude
\end_layout

\begin_layout LyX-Code
figure()
\end_layout

\begin_layout LyX-Code
imshow(F.abs())
\end_layout

\begin_layout LyX-Code
colorbar()
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#Plotting the angle
\end_layout

\begin_layout LyX-Code
figure()
\end_layout

\begin_layout LyX-Code
imshow(F.angle)
\end_layout

\begin_layout LyX-Code
colorbar()
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#Plotting the phase
\end_layout

\begin_layout LyX-Code
figure()
\end_layout

\begin_layout LyX-Code
imshow(F.phase)
\end_layout

\begin_layout LyX-Code
colorbar()
\end_layout

\begin_layout Standard
The unwrapped phase is calculated from the angle information using an ????
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
hay que buscar el nombre del algoritmo de unwrapping
\end_layout

\end_inset

 unwrapping algorithm.
 The value of such phase is calculated the first time it is needed.
 Later on if the phase is needed, a cached value is returned speeding up
 the process.
 Images of the amplitude, angle and phase are in figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pwave_amplitude"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pwave_angle"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pwave_phase"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Falta colocar las imagenes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename wavefront1-1.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pwave_amplitude"

\end_inset

Image showing the amplitude of the plane wave.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename wavefront1-2.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pwave_angle"

\end_inset

Image showing the angle of the plane wave
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename wavefront1-3.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pwave_phase"

\end_inset

Image showing the phase of the plane wave (unwrapped angle)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
gui package
\end_layout

\begin_layout Standard
The gui.....
\end_layout

\begin_layout Description
gui.RayTraMods eraras
\end_layout

\begin_layout Description
gui.logutils Modulo con utilidades para hacer archivos de log del programa.
 Esto esta mal ubicado.
 Deberia estar en el archivo de configuraci√≥n.
\end_layout

\begin_layout Description
gui.plot_frame Modulo con ......
\end_layout

\begin_layout Description
gui.plotutils Modulo con ......
\end_layout

\begin_layout Description
gui.shell_frame Modulo que define la consola de trabajo
\end_layout

\begin_layout Description
gui.wxrayos Modulo con.......
\end_layout

\begin_layout Chapter
misc package
\end_layout

\begin_layout Standard
The misc package
\end_layout

\begin_layout Description
raytrace.misc Modulo donde se definen rutinas miscelaneas
\end_layout

\begin_layout Chapter
ray_trace package
\end_layout

\begin_layout Standard
The ray_trace package is used to define and to simulate using exact 3D non
 secuential ray tracing algorithms, optical systems.
 It is composed by the following sub packages:
\end_layout

\begin_layout Description
surface Package that defines the classes used to describe the surfaces that
 are used to create optical elements.
\end_layout

\begin_layout Description
component Package that defines the classes used to describe the optical
 components that are used to describe optical systems.
\end_layout

\begin_layout Description
system Package that is used to describe the optical systems to be simulated.
\end_layout

\begin_layout Description
material Package that defines the class that describes the physical characteristi
cs of the materials used to create the optical components.
\end_layout

\begin_layout Description
ray Package that defines the class used to describe optical rays, and ray
 pencils.
\end_layout

\begin_layout Description
comp_lib Package that contains a library of predefined optical components.
\end_layout

\begin_layout Description
shape Package that defines de aperture shapes to be used in the components.
\end_layout

\begin_layout Description
calc Package that defines routines to calculate properties of the optical
 systems from the ray traceing.
\end_layout

\begin_layout Description
config Package that defines the default configutarion of the program.
\end_layout

\begin_layout Standard
This packages are described in the following sections:
\end_layout

\begin_layout Subsection
raytrace.surface 
\end_layout

\begin_layout Standard
Modulo que define las superficies √≥pticas que componen los elementos √≥pticos.
 En este modulo se definen las siguientes clases.
\end_layout

\begin_layout Subsubsection
Superclase Surface
\end_layout

\begin_layout Paragraph
Atributos de la superclase
\end_layout

\begin_layout Description
reflectivity Valor numerico entre 0 y 1 que indica la reflectividad de la
 superficie.
 0 para superficies transparentes, 1 para superficies completamente reflectivas.
 Si el valor es numpy.nan, la reflectividad deber√° calcularse usando las
 ecuaciones de fresnel (Esto no est√° implementado).
\end_layout

\begin_layout Description
changes Atributo numerico que se incrementa cada vez que se modifican atributos
 de la misma.
 Se utiliza para propagar modificaciones de las superficies, a las componentes
 y a los sistemas (hay que verificar si est√° esta funcionando para algo).
\end_layout

\begin_layout Description
shape Instancia de la clase shape, la cual define la apertura valida de
 la superficie.
\end_layout

\begin_layout Description
_hit_list Lista que contiene tuplas con la siguiente informaci√≥n: (punto
 de intersecci√≥n del rayo con la superficie (fin del rayo), apuntador al
 rayo que intersecta la superficie).
 Esta lista esta escondida para el usuario, el cual debe acceder unicamente
 a hit_list que es una lista de solo lectura.
\end_layout

\begin_layout Description
hit_list Lista que contiene tuplas con la siguiente informaci√≥n: (punto
 de intersecci√≥n del rayo con la superficie (fin del rayo), apuntador al
 rayo que intersecta la superficie).
 
\emph on
Esto no est√° funcionando bien, el acceso a hitlist, no esta escondido.
\end_layout

\begin_layout Paragraph
Metodos de la superclase
\end_layout

\begin_layout Description
_get_hitlist() Metodo utilizado por la libreria traits, para esconder el
 acceso a _hit_list
\end_layout

\begin_layout Description
topo(x,y) Metodo que retorna la topografia de la superficie como una matriz
 z=f(x,y).
 
\emph on
Este metodo debe ser sobrecargado en todas las subclases de Surface.
 
\end_layout

\begin_layout Description
int_nor(iray) Metodo que retorna una tupla que contiene la intersecci√≥n
 del rayo con la superficie, y la normal a ese punto de intersecci√≥n.
 Si el rayo no pasa a travez de la apertura de la superficie, el punto de
 intersecci√≥n retornado es (nan,nan,nan).
 Utiliza los metodos intersection y normal.
\end_layout

\begin_layout Description
normal(ip) Metodo que retorna el vector normal a la superficie en el punto
 ip.
 
\emph on
Este metodo debe ser sobrecargada en todas las subclases de Surface
\emph default
, puesto que contiene c√≥digo que es especifico a la forma geometrica de
 la superficie.
 
\end_layout

\begin_layout Description
intersection(iray) Metodo que retorna el punto de intersecci√≥n de un rayo
 con la superficie.
 Si el rayo no pasa a travez de la apertura de la superficie, el punto de
 intersecci√≥n retornado es (nan,nan,nan).
\end_layout

\begin_layout Description
_intersection(iray) Este metodo retorna el punto de intersecci√≥n entre un
 rayo y la superficie.
 Esta intersecci√≥n es calculada en el sistema de coordenadas de la superficie.
 Si no hay intersecci√≥n, (p.e.
 un rayo paralelo a una superficie plana) debe retornar (numpy.inf,numpy.inf,numpy.
inf).
 En este metodo iray -- es el rayo incidente a la superficie en el sistema
 de coordenadas de la superficie.
\begin_inset Newline newline
\end_inset


\emph on
Este metodo debe ser sobrecargada en todas las subclases de Surface
\emph default
, puesto que contiene c√≥digo que es especifico a la forma geometrica de
 la superficie.
 En √©ste codigo no se necesita verificar la apertura, solo la intersecci√≥n
 del rayo con la superficie infinita.
\begin_inset Newline newline
\end_inset

Surface._intersection no debe ser llamado directamente.
 Es su lugar debe llamarse Surface.intersection, que utiliza este metodo,
 y ademas verifica la apertura.
\end_layout

\begin_layout Description
distance(iray) Metodo que retorna la distancia recorrida por el rayo 
\emph on
iray
\emph default
 desde su origen, hasta que intersecta la superficie.
 El rayo iray, debe estar en el sistema coordenado de la superficie.
\begin_inset Newline newline
\end_inset

Este metodo retorna una tupla con la distancia, el punto de intersecci√≥n
 en el sistema coordenado de la superficie, y un apuntador a la superficie
 (distancia,punto de intersecci√≥n, superficie)
\begin_inset Newline newline
\end_inset

Este metodo hay que modificarlo, para que el valor que indica distancia
 0, pueda ser modificado desde el archivo de configuraci√≥n (1 e-10)
\end_layout

\begin_layout Description
propagate(ri,ni,nr) Metodo que calcula el rayo (o los rayos) refractados
 en la superficie.
 ri es el rayo incidente.
 ni el indice de refracci√≥n en el medio incidente, y nr el indice de refracci√≥n
 en el medio refractado.
 El rayo ri debe estar en el sistema coordenado de la superficie.
 Si la superficie es parcialmente reflectiva, retorna 2 rayos, el rayo refractad
o y el rayo reflejado.
\end_layout

\begin_layout Description
__repr__() Metodo que retorna una cadena de caracteres que describe la superfici
e √≥ptica.
 Debe ser sobrecargado en cada subclase de Surface.
\end_layout

\begin_layout Description
_any_trait_changed(self,name,old,new) Este metodo modifica el atributo 
\emph on
changes
\emph default
 cuando cualquier atributo de la superficie se modifica.
 El atributo changes, se utiliza para informar que 
\emph on
Component 
\emph default
y a 
\emph on
System
\emph default
 deben ser recalculados.
\end_layout

\begin_layout Description
tvtk_actor() Este programa utiliza la libreria tvtk, para realizar la representa
ci√≥n 3D de los objetos.
 Este metodo retorna un actor tvtk, el cual ser√° utilizado para realizar
 esta representacion 3D.
\end_layout

\begin_layout Description
reset() Borra la informaci√≥n de la lista de impactos de la superficie.
\end_layout

\begin_layout Paragraph
Resumen de metodos a sobrecargar en las subclases de Surface.
\end_layout

\begin_layout Description
topo(x,y) *
\end_layout

\begin_layout Description
_intersection(iray) *
\end_layout

\begin_layout Description
normal(ip) *
\end_layout

\begin_layout Description
__repr__() *
\end_layout

\begin_layout Subsubsection
Clase Plane
\end_layout

\begin_layout Standard
La clase Plane es utilizada para definir una superficie plana.
 La frontera de la superficie se define con el atributo shape.
 Este atributo permite definir superficies planas con diferente frontera
 (ver m√≥dulo raytrace.shape).
 Al ser Plane una subclase de Surface, edmite tambien reflectivity como
 par√°metro.
\end_layout

\begin_layout Standard
La sintaxis para definir una superficie plana es:
\end_layout

\begin_layout LyX-Code
>>> ps=Plane(shape=Rectangular(size=(25,15)))
\end_layout

\begin_layout Standard
Si la superficie es reflectiva (un semiespejo en este caso), la sintaxis
 es:
\end_layout

\begin_layout LyX-Code
>>> ps=Plane(shape=Rectangular(size=(25,15)), reflectivity=0.5)
\end_layout

\begin_layout Subsubsection
Clase Spherical
\end_layout

\begin_layout Standard
La clase Spherical es utilizada para definir una superficie esf√©rica.
 La curvatura de esta superficie se defime mediante el atributo curvature,
 la frontera con el atributo shape, y la reflectividad con reflectivity.
\end_layout

\begin_layout Standard
La sintaxis para definir una superficie esferica (espejo) es:
\end_layout

\begin_layout LyX-Code
>>> cs=Spherical(shape=Circular(radius=60),curvature=0.15, reflectivity=1.)
\end_layout

\begin_layout Subsubsection
Clase Cylindrical
\end_layout

\begin_layout Standard
La clase Cylindrical, es utilizada para definir casquetes cilindricos.
 La curvatura del cilindro se define mediante el atributo curvature, la
 frontera con el atributo shape, y la reflectividad con reflectivity.
\end_layout

\begin_layout Standard
La sintaxis para definir una superficie esf√©rica transparente es:
\end_layout

\begin_layout LyX-Code
>>> cs=Cylindrical(shape=Rectangular(size=(10,20)), curvature=0.15, reflectivity=
0)
\end_layout

\begin_layout Standard
o
\end_layout

\begin_layout LyX-Code
>>> cs=Cylindrical(shape=Rectangular(size=(10,20)), curvature=0.15)
\end_layout

\begin_layout Subsubsection
Clase Cylinder
\end_layout

\begin_layout Standard
La clase Cylinder es utilizada para definir cilindros cerrados, Se cre√≥
 en particular para facilitar la definici√≥n de lentes esfericas de apertura
 circular.
 
\end_layout

\begin_layout LyX-Code
>>> cs=Cylinder(radius=5.,length=10.)
\end_layout

\begin_layout Subsubsection
Clase ArrayDetector
\end_layout

\begin_layout Standard
Hay que verificar por que esta clase sobra....
 Colocar toda la funcionalidad en Surface....
\end_layout

\begin_layout Subsubsection
Clase TaylorPoly
\end_layout

\begin_layout Standard
La clase TaylorPoly es utilizada para definir superficies que son descritas
 por un polynomio de taylor.
 La frontera de la superficie se define con el atributo shape, la reflectividad
 con reflectivity, y los coheficientes del polinomio se definen por un array
 de numpy de la siguiente forma:
\end_layout

\begin_layout LyX-Code
cohef= [[ 
\begin_inset Formula $x_{0}y_{0}$
\end_inset

, 
\begin_inset Formula $x_{1}y_{0}$
\end_inset

, 
\begin_inset Formula $x_{2}y_{0}$
\end_inset

,...,
\begin_inset Formula $x_{m}y_{0}$
\end_inset

], 
\end_layout

\begin_layout LyX-Code
        [ 
\begin_inset Formula $x_{0}y_{1}$
\end_inset

, 
\begin_inset Formula $x_{1}y_{1}$
\end_inset

, 
\begin_inset Formula $x_{2}y_{1}$
\end_inset

rom enthought.traits.api import Float, List, Trait,,...,
\begin_inset Formula $x_{m}y_{1}$
\end_inset

], 
\end_layout

\begin_layout LyX-Code
        [ 
\begin_inset Formula $x_{0}y_{2}$
\end_inset

, 
\begin_inset Formula $x_{1}y_{2}$
\end_inset

, 
\begin_inset Formula $x_{2}y_{2}$
\end_inset

,...,
\begin_inset Formula $x_{m}y_{2}$
\end_inset

], 
\end_layout

\begin_layout LyX-Code
        [ ...
 , ...
 , ...
 ,..., ...
 ], 
\end_layout

\begin_layout LyX-Code
        [ 
\begin_inset Formula $x_{0}y_{n}$
\end_inset

, 
\begin_inset Formula $x_{1}y_{n}$
\end_inset

, 
\begin_inset Formula $x_{2}y_{n}$
\end_inset

,...,
\begin_inset Formula $x_{m}y_{n}$
\end_inset

]] 
\end_layout

\begin_layout Standard
donde el 
\begin_inset Formula $x_{l}y_{k}$
\end_inset

 es el coheficiente que acompa√±a al termino 
\begin_inset Formula $x^{l}y^{k}$
\end_inset

del polinomio.
 Esto es
\end_layout

\begin_layout Standard
\begin_inset Formula \[
p(X,Y)=\sum_{l=0}^{m}\sum_{k=0}^{n}x_{l}y_{k}X^{l}Y^{k}\]

\end_inset


\end_layout

\begin_layout Standard
A continuaci√≥n se presenta un ejemplo de superficie polinomial: 
\end_layout

\begin_layout LyX-Code
>>> cs=TaylorPoly(shape=Rectangle(size=(5,5)), 
\backslash
 
\end_layout

\begin_layout LyX-Code
                  cohef =[[0,1],[1,2]])
\end_layout

\begin_layout Subsubsection
Clase Aspherical
\end_layout

\begin_layout Standard
La clase Aspherical se usa para definir una superficie asferica que es descrita
 por la siquiente ecuacion:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
Z=\frac{(A_{x}x^{2}+A_{y}y^{2})}{1+\sqrt{1-(1+K_{x})A_{x}^{2}x^{2}-(1+K_{y})A_{y}^{2}y^{2}}}+TaylorPoly()\]

\end_inset


\end_layout

\begin_layout Standard
La frontera de la superficie se define con el atributo shape, la reflectividad
 con reflectivity, las curvaturas de la superficie con Ax y Ay, las constantes
 conicas con Kx y Ky y los coheficientes del polinomio se definen por un
 array de numpy de la siguiente forma:
\end_layout

\begin_layout LyX-Code
cohef= [[ 
\begin_inset Formula $x_{0}y_{0}$
\end_inset

, 
\begin_inset Formula $x_{1}y_{0}$
\end_inset

, 
\begin_inset Formula $x_{2}y_{0}$
\end_inset

,...,
\begin_inset Formula $x_{m}y_{0}$
\end_inset

], 
\end_layout

\begin_layout LyX-Code
        [ 
\begin_inset Formula $x_{0}y_{1}$
\end_inset

, 
\begin_inset Formula $x_{1}y_{1}$
\end_inset

, 
\begin_inset Formula $x_{2}y_{1}$
\end_inset

,...,
\begin_inset Formula $x_{m}y_{1}$
\end_inset

], 
\end_layout

\begin_layout LyX-Code
        [ 
\begin_inset Formula $x_{0}y_{2}$
\end_inset

, 
\begin_inset Formula $x_{1}y_{2}$
\end_inset

, 
\begin_inset Formula $x_{2}y_{2}$
\end_inset

,...,
\begin_inset Formula $x_{m}y_{2}$
\end_inset

], 
\end_layout

\begin_layout LyX-Code
        [ ...
 , ...
 , ...
 ,..., ...
 ], 
\end_layout

\begin_layout LyX-Code
        [ 
\begin_inset Formula $x_{0}y_{n}$
\end_inset

, 
\begin_inset Formula $x_{1}y_{n}$
\end_inset

, 
\begin_inset Formula $x_{2}y_{n}$
\end_inset

,...,
\begin_inset Formula $x_{m}y_{n}$
\end_inset

]] 
\end_layout

\begin_layout Standard
donde el 
\begin_inset Formula $x_{l}y_{k}$
\end_inset

 es el coheficiente que acompa√±a al termino 
\begin_inset Formula $x^{l}y^{k}$
\end_inset

del polinomio.
 Esto es
\end_layout

\begin_layout Standard
\begin_inset Formula \[
TaylorPoly(X,Y)=\sum_{l=0}^{m}\sum_{k=0}^{n}x_{l}y_{k}X^{l}Y^{k}\]

\end_inset


\end_layout

\begin_layout Standard
Un ejemplo de superficie asf√©rica se presenta a continuaci√≥n:
\end_layout

\begin_layout LyX-Code
>>> cs=Aspherical(shape=Rectangle(size=(5,5)),Ax=.5,Ay=.3,Kx=.1, Ky=.1 
\backslash
 
\end_layout

\begin_layout LyX-Code
                  cohef =[[0,1],[1,2]])
\end_layout

\begin_layout Subsection
raytrace.component 
\end_layout

\begin_layout Standard
Modulo que define las componentes √≥pticas.
 En este modulo se definen la siguiente clase.
\end_layout

\begin_layout Subsubsection
Superclase Component
\end_layout

\begin_layout Paragraph
Atributos de la superclase
\end_layout

\begin_layout Description
surflist Este atributo se utiliza para indicar que superficies arman una
 componente.
 Se define como una lista de tuplas, donde cada tupla est√° definida como:
\begin_inset Newline newline
\end_inset

(surface,(PosX,PosY,PosZ), (RotX, RotY, RotZ))
\end_layout

\begin_deeper
\begin_layout Description
surface Es una instancia de la clase Superficie o de cualquiera de sus subclases
\end_layout

\begin_layout Description
(PosX,PosY,PosZ) indica la posici√≥n del vertice de la superficie en el sistema
 de coordenadas de la componente.
\end_layout

\begin_layout Description
(RotX,RotY,RotZ) indica el √°ngulo de rotaci√≥n (en radianes) de la superficie
 alrededor de los ejes X,Y,Z respectivamente.
 La rotaci√≥n se aplica primero alrededor del eje Z, luego alrededor del
 eje Y y por ultimo alrededor del eje X
\end_layout

\end_deeper
\begin_layout Description
material Instancia de la clase material, donde se tienen en cuenta las constante
s de dispersi√≥n para calcular el indice de refracci√≥n en funci√≥n de la longitud
 de onda, o un n√∫mero constante en caso de que se quiera un indice constante
 no dependiente de la longitud de onda.
\end_layout

\begin_layout Description
changes Atributo numerico que se incrementa cada vez que se modifican atributos
 de la componente o de las superficies que conforman la componente.
 Se utiliza para propagar modificaciones de las superficies, a las componentes
 y a los sistemas (hay que verificar si est√° esta funcionando para algo).
\end_layout

\begin_layout Paragraph
M√©todos de la superclase
\end_layout

\begin_layout Description
__repr_() Metodo que retorna una cadena de caracteres que describe la componente.
\end_layout

\begin_layout Description
_anytrait_changed() Por ahora no hace nada
\end_layout

\begin_layout Description
_get_hitlist() Metodo utilizado por la libreria traits, para esconder el
 acceso a _hit_list.
 Este m√©todo lee el hit_list de todas las superficies, que forman la componente,
 y genera una lista de impactos en el sistema de coordenadas de la componente.
 Este m√©todo se ejecuta automaticamente cada vez que se lee el atributo
 hit_list de la componente.
 
\end_layout

\begin_layout Description
distance(ri) Metodo que retorna la distancia recorrida por el rayo ri hasta
 intersectar con la superficie mas proxima de la componente.
 Retorna una tupla con la distancia geom√©trica, el punto de intersecci√≥n
 en el sistema de coordenadas de la superficie intersectada, y un apuntador
 a la superficie intersectada.
\end_layout

\begin_layout Description
n(wl) Metodo que retorna el √≠ndice de refracci√≥n de la componente a la longitud
 de onda dada por wl en micras.
 Si no se le da valor a wl, retorna el √≠ndice de refracci√≥n a una longitud
 de onda de 
\begin_inset Formula $0.58929\mu m$
\end_inset


\end_layout

\begin_layout Description
propagate(ri,n_m) Retorna una lista con los rayos resultante de la interacci√≥n
 (refracci√≥n, reflexion, etc) entre el rayo incidente (ri) y la superficie
 m√°s proxima perteneciente a la componente.
 Los rayos retornados est√°n en el sistema de coordenadas de la componente.
 
\end_layout

\begin_layout Description
reset() Metodo que ejecuta la funci√≥n reset para todas las superficies que
 definen la componente.
\end_layout

\begin_layout Description
surf_changed() Metodo que se ejecuta cuando alguna de las superficies que
 componen la componente se modifica.
 Incrementa Component.changes en 1.
\end_layout

\begin_layout Description
tvtk_actor() Este programa utiliza la libreria tvtk, para realizar la representa
ci√≥n 3D de los objetos.
 Este metodo retorna un actor tvtk, el cual ser√° utilizado para realizar
 esta representacion 3D de la componente.
\end_layout

\begin_layout Description
tvtk_draw(ren) Este programa utiliza la libreria tvtk, para realizar la
 representaci√≥n 3D de los objetos.
 Este metodo grafica el objeto en una ventana tvtk representada por ren.
\end_layout

\begin_layout Subsection
raytrace.system
\end_layout

\begin_layout Standard
Modulo que define las componentes √≥pticas.
 En este modulo se definen la siguiente clase.
\end_layout

\begin_layout Subsubsection
Superclase System
\end_layout

\begin_layout Description
__repr__() Metodo que retorna una cadena de caracteres que describe el sistema.
\end_layout

\begin_layout Description
_anytrait_changed_() Verifica si lo que se modific√≥ fue alguna componente
 o superficie que forman en sistema √≥ptico, si esto es cierto, elimina las
 listas de rayos propagados, y resetea todas las componentes √≥pticas
\end_layout

\begin_layout Description
_get_prop_raytra_() Se usa para esconder la lista de rayos propagados
\end_layout

\begin_layout Description
clear_ray_list() Elimina todos los rayos (propagados y no propagados), del
 sistema √≥ptico.
\end_layout

\begin_layout Description
comp_changed() Es una funci√≥n auxiliar que se ejecuta cuando una componente
 √≥ptica es modificada.
\end_layout

\begin_layout Description
component_add() Hay que revisar si esta funci√≥n se necesita
\end_layout

\begin_layout Description
distance() Calcula la distancia entre el inicio de un rayo y su primera
 intersecci√≥n a un sistema-.
\end_layout

\begin_layout Description
propagate() Propaga a travez del sistema √≥ptico todos los rayos de la lista
 de rayos no propagados.
\end_layout

\begin_layout Description
propagate_ray(ri) Metodo que propaga un rayo en el sistema.
 Los rayos resultantes de la interacci√≥n de el rayo original, con una superficie
, se guardan en la lista Ray.childs, y a su vez cada uno de estos rayos tienen
 un apuntador al rayo original en Ray.parent.
 Este m√©todo se llama a si mismo recursivamente hasta que no hay intersecci√≥n
 de el rayo con el sistema.
 Retororna un apuntador al rayo original.
 
\end_layout

\begin_layout Description
ray_add() Metodo que se utiliza para adicionar un rayo, o una lista de rayos
 a la lista de rayos primarios del sistema
\end_layout

\begin_layout Description
reset() Metodo que llama la funci√≥n reset de todos los componentes de un
 sistema √≥ptico
\end_layout

\begin_layout Description
tvtk_actor() Este programa utiliza la libreria tvtk, para realizar la representa
ci√≥n 3D de los sistemas.
 Este metodo retorna un actor tvtk, el cual ser√° utilizado para realizar
 esta representacion 3D.
\end_layout

\begin_layout Description
tvtk_draw() Este programa utiliza la libreria tvtk, para realizar la representac
i√≥n 3D de los sistemas.
 Este metodo grafica el objeto en una ventana tvtk representada por ren.
\end_layout

\begin_layout Subsection
raytrace.ray 
\end_layout

\begin_layout Standard
Modulo que define los rayos √≥pticos.
\end_layout

\begin_layout Subsubsection
Superclase Ray
\end_layout

\begin_layout Paragraph
Atributos de la superclase
\end_layout

\begin_layout Description
pos Tupla (x,y,z) que contiene el origen del rayo
\end_layout

\begin_layout Description
dir Tupla (x,y,z) que contiene el vector direcci√≥n del rayo.
 Esta direcci√≥n se normaliza automaticamente.
\end_layout

\begin_layout Description
intensity Valor numerico que representa la intensidad del rayo.
 Hay que revisar cual es la unidad correcta f√≠sicamente.
\end_layout

\begin_layout Description
wavelength Longitud de onda de la luz representada por √©ste rayo
\end_layout

\begin_layout Description
n √çndice de refracci√≥n del material donde est√° el punto origen del rayo.
 Para rayos que salen del ambiente, se puede configurar a None.
\end_layout

\begin_layout Description
label Identificador usado para seguir un rayo
\end_layout

\begin_layout Description
parent Rayo de donde el rayo sal√≠o.
 Es el apuntador al rayo antes de interactuar con la superficie
\end_layout

\begin_layout Description
orig_surf Superficie donde se origina el rayo.
 Los rayos que no se originan en una superficie deben tener en este atributo
 un None.
\end_layout

\begin_layout Description
childs Atributo de solo lectura que esconde la lista de hijos del rayo.
\end_layout

\begin_layout Description
__childs Lista donde se registran los rayos hijo de este rayo al interactuar
 con una superficie.
 
\end_layout

\begin_layout Paragraph
M√©todos de la superclase
\end_layout

\begin_layout Description
__repr__() Metodo que retorna una cadena de caracteres que describe el rayo.
\end_layout

\begin_layout Description
_get_childs() Metodo auxiliar usado por la libreria Traits, para esconder
 la lista __childs en el atributo de solo lectura childs.
\end_layout

\begin_layout Description
add_child(cr) Metodo que adiciona un rayo hijo al rayo actual, y crea los
 links necesarios (parent y childs)
\end_layout

\begin_layout Description
ch_coord_sys(no,ae) Metodo que retorna un rayoen un nuevo sistema de coordenadas.
\begin_inset Newline newline
\end_inset

El atrributo 
\emph on
no 
\emph default
es una tupla con la posici√≥n del origen del nuevo sistema de coordenadas
 en el sistema de coordenadas actual.
\begin_inset Newline newline
\end_inset

El atributo ae es una tupla=(RX,RY,RZ) con las rotaciones alrededor de los
 ejes X,Y,Z necesarias para pasar del sistema de coordenadas viejo, al nuevo.
\begin_inset Newline newline
\end_inset

La transformaci√≥n se hace desplazando el origen, y luego rotando......
\end_layout

\begin_layout Description
ch_coord_sys_inv(no,ae) Nota, hay que verificar si las transformaciones
 estan al redecho o al revez.
\end_layout

\begin_layout Description
copy() Retorna una copia del rayo dejando parent =None y childs=[]
\end_layout

\begin_layout Description
get_final_rays(inc_zeros) Retorna una lista con los rayos finales del trazo
 de rayos.
 Si se pasa inc_zeros=False, se eliminan de la lista los rayos que tienen
 una intensidad 0 (Todos los rayos que chocan con una superficie opaca no
 reflectiva, tienen como hijo un rayo con intensidad 0 que indica el final
 del rayo).
 
\end_layout

\begin_layout Description
optical_path() Retorna la longitud de camino optico recorrida por la luz,
 desde el origen del rayo inicial, hasta el final del rayo su final (interseccio
n con una superficie)
\end_layout

\begin_layout Description
optical_path_parent() Retorna la longitud de camino optico recorrida por
 la luz, desde le origen del rayo inicial, hasta el origen del rayo (final
 de su rayo padre)
\end_layout

\begin_layout Description
reverse() Retorna una copia del rayo apuntando en direccion opuesta (deja
 parent =None y childs=[])
\end_layout

\begin_layout Description
tvtk_draw(ren,lrl,draw_childs) Este programa utiliza la libreria tvtk, para
 realizar la representaci√≥n 3D de los rayos.
 Este metodo grafica el objeto en una ventana tvtk representada por ren.
\end_layout

\begin_layout Subsection
raytrace.shape
\end_layout

\begin_layout Standard
Modulo que define la forma de las fronteras de las superficiesutilizadas
 para construir elementos √≥pticos.
\end_layout

\begin_layout Subsubsection
Superclase Shape
\end_layout

\begin_layout Paragraph
M√©todos de la superclase
\end_layout

\begin_layout Description
hit(p) Este m√©todo debe ser sobrecargado en las subclases de Shape.
 Debe retornar TRUE si un punto p=(X,Y,Z) esta dentro de la apertura y FALSE
 si no.
 Normalmente se verifican unicamente las coordenadas X y Y (Se toma la apertura
 en Z=0)
\end_layout

\begin_layout Description
limits() Retorna los 2 puntos que definen el rectangulo m√°s peque√±o que
 encierra la apertura.
 Debe ser sobrecargado en todas las subclases.
\end_layout

\begin_layout Description
mesh(size,ndat,topo) Este metodo retorna 3 matrices X,Y y Z con ndat=(nx,ny)
 puntos cada una y limitadas por el tama√±o dado en size=(xi,xf,yi,yf), si
 size no es suministrado, el m√©todo utilizar√° el tama√±o retornado por limits().
 Z est√° dada por topo (topo sale del metodo topo de las superficies).
 Si topo no es suministrado Z tomar√° un valor de 1 para los puntos dentro
 de la apertura, y 0 para puntos fuera de la apertura.
 
\end_layout

\begin_layout Description
polylist Este m√©todo retorna una tupla (point_list, poly_list), y recibe
 como atributo topo (Z=topo(x,y)) (la cual es la funci√≥n que representa
 la topografia de la superficie).
 La lista point_list, es una lista de tuplas (X,Y,Z) que contiene las coordenada
s de los puntos usados para generar la malla que representa la superficie.
 La lista poly_list es una lista de tuplas (n1,n2,n3,n3) que contienen los
 indices de los puntos usados para construir cada uno de los poligonos que
 van a ser usados para visualizar la malla.
 Este m√©todo debe ser sobrecargado para cada forma.
\end_layout

\begin_layout Subsubsection
Clase Rectangular
\end_layout

\begin_layout Standard
La clase Rectangular es usada para definir una apertura rectangular.
 Recibe como atributos una tupla size, la cual indica el tama√±o del rectangulo,
 y una tupla samples, la cual indica cuantos puntos se van a usar para construir
 la maya que se utilizara en la visualizaci√≥n 3D de las superficies.
\end_layout

\begin_layout Standard
La sintaxis para definir una apertura rectangular es:
\end_layout

\begin_layout LyX-Code
>>> ra=Rectangular(size=(20,20),samples=(25,25))
\end_layout

\begin_layout Subsubsection
Clase Circular
\end_layout

\begin_layout Standard
La clase Circular es usada para definir una apertura circular.
 Recibe como atributos un numero 
\emph on
radius
\emph default
, que indica el radio de la apertura, y una tupla 
\emph on
samples=(sr,sa)
\emph default
 , en donde sr es el numero de muestras radiales, y sa el numero de muestras
 angulares que se utilizar√°n para construir la maya que se usar√°en la visualizac
i√≥n 3D de las superficies.
\end_layout

\begin_layout Standard
La sintaxis para definir una apertura circular es:
\end_layout

\begin_layout LyX-Code
>>> ra=Circular(radius=20,samples=(5,16))
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
raytrace.calc
\end_layout

\begin_layout Standard
En el modulo calc, se definen funciones para obtener informaci√≥n de los
 sistemas √≥pticos.
\end_layout

\begin_layout Standard
chief_ray_search()
\end_layout

\begin_layout Subsection
raytrace.comp_lib
\end_layout

\begin_layout Subsection
raytrace.config
\end_layout

\begin_layout Subsection
raytrace.mat_lib
\end_layout

\begin_layout Subsection
raytrace.misc
\end_layout

\begin_layout Chapter
wavefront package
\end_layout

\begin_layout Standard
the wavefront package
\end_layout

\begin_layout Description
wavefront.surfacew Modulo con.....
\end_layout

\begin_layout Description
wavefront.wavefront Modulo con .....
\end_layout

\begin_layout Description
wavefront.zernike Modulo con ....
\end_layout

\begin_layout Section
Field Module
\end_layout

\begin_layout Standard
The field module is used to calculate optical systems using field propagation
 techniques.
 It defines the class field.....
\end_layout

\begin_layout Subsection
Field Class
\end_layout

\begin_layout Standard
The field class is used to simulate optical fields, 
\end_layout

\end_body
\end_document
