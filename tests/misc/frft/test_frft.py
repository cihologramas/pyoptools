# standard imports

# third-party imports
import numpy as np

# local imports
import pyoptools.misc.frft as frft


def test_frft():
    # frft(x,alpha)
    expected = np.array(
        [
            4.44089210e-17 - 1.77635684e-16j,
            -4.83717564e-01 - 2.16493490e-15j,
            -2.28136623e-01 + 3.14003123e-01j,
            -4.62230632e00 - 1.72528658e-13j,
            7.86231108e-01 - 2.55461973e-01j,
            3.63970234e-01 + 4.49646844e-12j,
            -7.60527752e-12 + 8.26692310e-01j,
            3.73952436e00 + 2.71692349e00j,
            -7.97433092e-11 + 3.88129206e-01j,
            -1.49476948e-01 - 4.60042742e-01j,
        ]
    )
    x = np.linspace(0, np.pi * 2, 10)
    y = np.sin(x)
    alpha = 3
    calculated = frft.frft(y, alpha)
    np.testing.assert_almost_equal(calculated, expected)


def test_frft2():
    # frft2(x,alpha)
    expected = np.array(
        [
            [
                2.50000000e01 - 2.99730296e-15j,
                -1.46719695e-15 + 1.60711916e-15j,
                -2.57460788e-15 + 9.56814037e-16j,
                2.15903523e-15 - 1.76280956e-15j,
                4.98876393e-15 - 2.19426934e-15j,
            ],
            [
                -2.60327511e-15 + 1.70560704e-15j,
                5.80882548e-32 - 1.88466443e-31j,
                -8.64120853e-32 - 1.88925080e-31j,
                -8.97420407e-32 + 3.24832872e-31j,
                -2.58598101e-31 + 3.85504261e-31j,
            ],
            [
                -1.84243118e-15 + 3.85539887e-17j,
                2.91082044e-32 - 2.28354060e-31j,
                8.93554407e-32 + 8.10747286e-32j,
                -1.42034285e-31 + 1.28388906e-31j,
                -2.02892477e-31 + 1.99705299e-32j,
            ],
            [
                2.55323143e-15 - 2.00316220e-15j,
                -3.49042145e-32 + 2.20376537e-31j,
                1.50405574e-32 + 1.37070630e-31j,
                -5.73193308e-33 + 1.42098362e-31j,
                1.99463287e-31 - 3.42540303e-31j,
            ],
            [
                3.37818030e-15 - 2.48052570e-15j,
                -1.79996697e-31 + 4.23300967e-31j,
                3.14163515e-32 + 1.63285568e-31j,
                -7.55403620e-32 - 2.98654711e-31j,
                2.18903157e-31 - 7.23623635e-31j,
            ],
        ]
    )

    nd = 5
    data = np.zeros((nd, nd))
    csize = 10
    data[
        int(nd / 2 - csize) : int(nd / 2 + csize),
        int(nd / 2 - csize) : int(nd / 2 + csize),
    ] = 1
    calculated = frft.frft2(data, 1)

    np.testing.assert_almost_equal(calculated, expected)


def test_rs_kernel():
    # rs_kernel(x=0., y=0., z=0., n=1.)
    expected = np.array(
        [
            [
                -6.9822875 - 5.75726205j,
                -6.98245117 - 5.75706354j,
                -6.98253301 - 5.75696428j,
                -6.98253301 - 5.75696428j,
                -6.98245117 - 5.75706354j,
            ],
            [
                -6.98245117 - 5.75706354j,
                -6.98261485 - 5.75686502j,
                -6.98269669 - 5.75676576j,
                -6.98269669 - 5.75676576j,
                -6.98261485 - 5.75686502j,
            ],
            [
                -6.98253301 - 5.75696428j,
                -6.98269669 - 5.75676576j,
                -6.98277852 - 5.7566665j,
                -6.98277852 - 5.7566665j,
                -6.98269669 - 5.75676576j,
            ],
            [
                -6.98253301 - 5.75696428j,
                -6.98269669 - 5.75676576j,
                -6.98277852 - 5.7566665j,
                -6.98277852 - 5.7566665j,
                -6.98269669 - 5.75676576j,
            ],
            [
                -6.98245117 - 5.75706354j,
                -6.98261485 - 5.75686502j,
                -6.98269669 - 5.75676576j,
                -6.98269669 - 5.75676576j,
                -6.98261485 - 5.75686502j,
            ],
        ]
    )

    nd = 5
    data = np.zeros((nd, nd))
    csize = 10
    data[
        int(nd / 2 - csize) : int(nd / 2 + csize),
        int(nd / 2 - csize) : int(nd / 2 + csize),
    ] = 1
    nx, ny = data.shape
    dx, dy = 0.5e-3, 0.5e-3
    X, Y = np.indices((nx, ny))
    ux = (X - nx / 2) * dx
    uy = (Y - ny / 2) * dy  # appropriate size to calculate
    calculated = frft.rs_kernel(x=ux, y=uy, z=250.0, n=1.0)

    np.testing.assert_almost_equal(calculated, expected)
